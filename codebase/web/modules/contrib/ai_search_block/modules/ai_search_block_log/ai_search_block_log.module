<?php

/**
 * @file
 * The module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function ai_search_block_log_theme(): array {
  return [
    'ai_search_block_log' => ['render element' => 'elements'],
  ];
}

/**
 * Implements hook_cron().
 *
 * Add methods here to be executed via cron.
 */
function ai_search_block_log_cron() {
  $helper = \Drupal::service('ai_search_block_log.helper');
  return $helper->cron();
}

/**
 * Prepares variables for ai search block log templates.
 *
 * Default template: ai-search-block-log.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the ai search block log
 *   information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ai_search_block_log(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_form_alter().
 */
function ai_search_block_log_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ('ai_talk_with_node_form' == $form_id) {
    if (\Drupal::moduleHandler()->moduleExists('ai_talk_with_node')) {
      $form['#attached']['library'][] = 'ai_search_block_log/ai_search_block_log_js';
    }
  }
  if ('ai_search_block_form' == $form_id) {
    if (\Drupal::moduleHandler()->moduleExists('ai_search_block_log')) {
      $form['#attached']['library'][] = 'ai_search_block_log/ai_search_block_log_js';
    }
  }
}

/**
 * Function to commence logging (create first log row).
 *
 * @param string $block_id
 *   The id of the block.
 * @param int $uid
 *   The user id.
 * @param string $query
 *   The question.
 *
 * @return mixed
 *   Returns the log Id.
 */
function ai_search_block_log_start($block_id, $uid, $query) {
  $helper = \Drupal::service('ai_search_block_log.helper');
  return $helper->start($block_id, $uid, $query);
}

/**
 * Function to add a Response to a log.
 *
 * @param int $logId
 *   The log id to update.
 * @param string $response
 *   The response to update.
 *
 * @return mixed
 *   Returns the return.
 */
function ai_search_block_log_add_response($logId, $response) {
  $helper = \Drupal::service('ai_search_block_log.helper');
  return $helper->logResponse($logId, $response);
}

/**
 * Function to update the log with arbitrary fields.
 *
 * @param int $logId
 *   The log id.
 * @param array $fields
 *   The fields to update.
 *
 * @return mixed
 *   Returns the return.
 */
function ai_search_block_log_update($logId, $fields) {
  $helper = \Drupal::service('ai_search_block_log.helper');
  return $helper->update($logId, $fields);
}
