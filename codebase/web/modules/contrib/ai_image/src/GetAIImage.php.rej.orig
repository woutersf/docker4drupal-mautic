@@ -2,7 +2,9 @@
 
 namespace Drupal\ai_image;
 
+use Drupal\ai\AiProviderPluginManager;
 use Drupal\ai\OperationType\TextToImage\TextToImageInput;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\State\StateInterface;
@@ -64,92 +81,77 @@
    * @param \Drupal\Core\UrlGeneratorInterface $fileUrlGenerator
    *   The file URL generator service.
    */
-  public function __construct(StateInterface $state, LoggerChannelFactoryInterface $loggerFactory, FileSystemInterface $fileSystem, FileRepositoryInterface $fileRepository, FileUrlGenerator $fileUrlGenerator) {
+  public function __construct(StateInterface $state, LoggerChannelFactoryInterface $loggerFactory, FileSystemInterface $fileSystem, FileRepositoryInterface $fileRepository, FileUrlGenerator $fileUrlGenerator, AiProviderPluginManager $ai_provider_manager,ModuleHandlerInterface $module_handler ) {
     $this->state = $state;
     $this->logger = $loggerFactory->get('ai_image');
     $this->fileSystem = $fileSystem;
     $this->fileRepository = $fileRepository;
     $this->fileUrlGenerator = $fileUrlGenerator;
+    $this->aiProviderManager = $ai_provider_manager;
+    $this->moduleHandler = $module_handler;
   }
 
   /**
-   * Generate the image in the AI provider.
+   * {@inheritdoc}
    *
-   * @param $provider_name
-   * @param $prompt
+   * @param String $prompt
+   *   The prompt string.
+   * @param String $api
+   *   The image generation engine.
+   * @param String $api_key
+   *   API secret key.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return int
+   *   The count of rows processed
    */
-  public function generateImageInAiModule($provider_name, $prompt) {
-    $service = \Drupal::service('ai.provider');
-    if ($provider_name == '000-AI-IMAGE-DEFAULT') {
-      $ai_config = \Drupal::service('config.factory')->get('ai.settings');
-      $default_providers = $ai_config->get('default_providers') ?? [];
-      $ai_provider = $service->createInstance($default_providers['text_to_image']['provider_id']);
-      $default_model = $default_providers['text_to_image']['model_id'];
-    }
-    else {
-      $ai_provider = $service->createInstance($provider_name);
-      // TODO if no $default_model how to define this? via the ckeditor admin?
-    }
-    $config = [
-      "n" => 1,
-      //"response_format" => "b64_json",
-      "response_format" => "url",
-      //"size" => "1792x1024",
-      "size" => "1024x1024",
-      "quality" => "standard",
-      "style" => "vivid",
-    ];
-    $tags = ["tag_1", "tag_2"];
-    try {
-      $ai_provider->setConfiguration($config);
-      $input = new TextToImageInput($prompt);
-      $response = $ai_provider->textToImage($input, $default_model, $tags);
-      $url = $this->saveAndGetImageUrl($response);
-
-      if ($url) {
-        $this->state->set('recent_image', $url);
-        $this->state->set('recent_prompt', $prompt);
-        return $url;
-      }
-      else {
-        return FALSE;
-      }
-    } catch (Drupal\ai\Exception\AiUnsafePromptException $e) {
-      // TODO should maybe be notified in ckeditor?
-      return FALSE;
-    }
+  public function getImage(string $provider, string $model, string $prompt) {
+    return $this->getAiIMage($provider, $model, $prompt);
   }
 
-  /***
-   * Generate a URL for this generated image.
-   *
-   * @param $response
-   *
-   * @return \Drupal\Core\GeneratedUrl|string
-   */
-  private function saveAndGetImageUrl($response) {
-    $rand = time() . '-' . rand(0, 10000);
-    $file_name = $rand . ".png";
-    $directory = 'public://ai_image_gen_images/';
-    $file_path = $directory . $file_name;
-
-    $file_system = $this->fileSystem;
-    $file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
-
-    $image_abstractions = $response->getNormalized();
-    $images = [];
-    foreach ($image_abstractions as $image_abstraction) {
-      $images[] = $image_abstraction->getAsFileEntity($file_path);
+  private function getAiIMage($provider, $model, $prompt) {
+    $config = [];
+    if ($provider == 'openai') {
+      $config = [
+        "n" => 1,
+        "response_format" => "url",
+        "size" => '1024x1024',
+        "quality" => "standard",
+        "style" => "vivid",
+      ];
     }
-    if (isset($images[0])) {
-      $image_path = $images[0]->getFileUri();
-      return $this->fileUrlGenerator
-        ->generate($image_path)
-        ->toString();
+    if (str_contains($model,'stable-diffusion')) {
+      $config = [
+        "response_format" => "url",
+        "negative_prompt"=> "((out of frame)), ((extra fingers)), mutated hands, ((poorly drawn hands)), ((poorly drawn face)), (((mutation))), (((deformed))), (((tiling))), ((naked)), ((tile)), ((fleshpile)), ((ugly)), (((abstract))), blurry, ((bad anatomy)), ((bad proportions)), ((extra limbs)), cloned face, (((skinny))), glitchy, ((extra breasts)), ((double torso)), ((extra arms)), ((extra hands)), ((mangled fingers)), ((missing breasts)), (missing lips), ((ugly face)), ((fat)), ((extra legs)), anime",
+        "cfg_scale" => null,
+        "width"=> "768",
+        "height"=> "768",
+        "samples"=> "1",
+        "steps"=> null,
+        "sampler"=> 'None',
+        "num_inference_steps"=> "20",
+        "seed"=> null,
+        "guidance_scale"=> 7.5,
+        "webhook"=> null,
+        "track_id"=> null,
+        "accept" =>  "image/jpeg",
+        "output_image_format" => 'JPG',
+      ];
     }
-    return FALSE;
+
+    // Allow overriding of the config passed in to the AI image generation.
+    $hook = 'ai_image_alter_config';
+    $this->moduleHandler->invokeAllWith($hook, function (callable $hook, string $module) use (&$config, $model, $provider) {
+      $config = $hook();
+    });
+
+    $ai_provider = $this->aiProviderManager->createInstance($provider);
+    $ai_provider->setConfiguration($config);
+    $input = new TextToImageInput($prompt);
+    // This gets an array of \Drupal\ai\OperationType\GenericType\ImageFile.
+    $normalized = $ai_provider->textToImage($input, $model, ["ai_image"])->getNormalized();
+    $file = $normalized[0]->getAsFileEntity("public://", "generated_image.png");
+    return $this->fileUrlGenerator->generateAbsoluteString($file->getFileUri());
   }
 }
+
