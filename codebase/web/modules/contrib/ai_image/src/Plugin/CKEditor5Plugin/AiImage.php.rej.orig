@@ -8,25 +8,28 @@
 use Drupal\ckeditor5\Plugin\CKEditor5PluginConfigurableTrait;
 use Drupal\ckeditor5\Plugin\CKEditor5PluginDefault;
 use Drupal\ckeditor5\Plugin\CKEditor5PluginConfigurableInterface;
-use Drupal\ckeditor5\Plugin\CKEditor5PluginDefinition;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\editor\EditorInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
 
 /**
  * CKEditor 5 OpenAI Completion plugin configuration.
  */
-class AiImage extends CKEditor5PluginDefault implements ContainerFactoryPluginInterface, CKEditor5PluginConfigurableInterface {
+class AiImage extends CKEditor5PluginDefault implements CKEditor5PluginConfigurableInterface, ContainerFactoryPluginInterface {
 
   use CKEditor5PluginConfigurableTrait;
 
   /**
-   * The AI Provider service.
+   * The provider plugin manager.
    *
    * @var \Drupal\ai\AiProviderPluginManager
    */
-  protected $providerManager;
+  protected AiProviderPluginManager $aiProviderManager;
 
 
   /**
@@ -36,34 +39,32 @@
    */
   const DEFAULT_CONFIGURATION = [
     'aiimage' => [
-      'source' => '000-AI-IMAGE-DEFAULT',
+      'source' => 'openai',
       'prompt_extra' => 'hyper-realistic, super detailed',
     ],
   ];
 
-  public function __construct(array                     $configuration,
-                              string                    $plugin_id,
-                              CKEditor5PluginDefinition $plugin_definition,
-                              AiProviderPluginManager   $provider_manager) {
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, AiProviderPluginManager $ai_provider_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
-    $this->providerManager = $provider_manager;
+    $this->setConfiguration($configuration);
+    $this->aiProviderManager = $ai_provider_manager;
   }
 
   /**
    * {@inheritdoc}
    */
-  public static function create(ContainerInterface $container,
-                                array              $configuration,
-                                                   $plugin_id,
-                                                   $plugin_definition) {
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static(
       $configuration,
       $plugin_id,
       $plugin_definition,
-      $container->get('ai.provider'));
+      $container->get('ai.provider'),
+    );
   }
 
-
   /**
    * {@inheritdoc}
    */
@@ -75,7 +76,6 @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-
     $form['aiimage'] = [
       '#title' => $this->t('AI Image'),
       '#type' => 'details',
@@ -84,26 +84,19 @@
       '#tree' => TRUE,
     ];
 
-    $providers = [];
-    $options['000-AI-IMAGE-DEFAULT'] = 'Default provider (configured in AI default settings)';
-    foreach ($this->providerManager->getDefinitions() as $id => $definition) {
-      $providers[$id] = $this->providerManager->createInstance($id);
-    }
-
-    foreach ($providers as $provider) {
-      if ($provider->isUsable('text_to_image')) {
-        $options[$provider->getPluginId()] = $provider->getPluginDefinition()['label'];
-      }
-    }
-
+    $options = $this->aiProviderManager->getSimpleProviderModelOptions('text_to_image');
+    array_shift($options);
+    array_splice($options, 0, 1);
     $form['aiimage']['source'] = [
       '#type' => 'select',
-      '#title' => $this->t('AI engine'),
+      '#title' => $this->t('AI provider'),
       '#options' => $options,
-      '#default_value' => $this->configuration['aiimage']['source'] ?? '000-AI-IMAGE-DEFAULT',
-      '#description' => $this->t('Select which model to use to generate images.'),
+      "#empty_option" => $this->t('-- Default from AI module (text_to_image) --'),
+      '#default_value' => $this->configuration['aiimage']['source'] ?? $this->aiProviderManager->getSimpleDefaultProviderOptions('text_to_image'),
+      '#description' => $this->t('Select which provider to use for this plugin. See the <a href=":link">Provider overview</a> for details about each provider.', [':link' => '/admin/config/ai/providers']),
     ];
 
+
     $form['aiimage']['prompt_extra'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Prompt extra'),
@@ -126,10 +119,6 @@
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->getValues();
     $this->configuration['aiimage']['source'] = $values['aiimage']['source'];
-    if ('000-AI-IMAGE-DEFAULT' == $this->configuration['aiimage']['source']) {
-      // Make sure a default is selected.
-      _ai_image_check_default_provider_and_model();
-    }
     $this->configuration['aiimage']['prompt_extra'] = $values['aiimage']['prompt_extra'];
   }
 
